diff --git a/aws-data-api/pg/index.cjs b/aws-data-api/pg/index.cjs
index 1e167e593b97aa5ab1367ad0548f912c0243edad..293f3d94f895d33ac0b9d790168e0cf86938641b 100644
--- a/aws-data-api/pg/index.cjs
+++ b/aws-data-api/pg/index.cjs
@@ -1,252 +1,308 @@
-'use strict';
+"use strict";
 
-var index = require('../../index-1899b9ae.cjs');
-var clientRdsData = require('@aws-sdk/client-rds-data');
+var index = require("../../index-1899b9ae.cjs");
+var clientRdsData = require("@aws-sdk/client-rds-data");
 
 function getValueFromDataApi(field) {
-    if (field.stringValue !== undefined) {
-        return field.stringValue;
-    }
-    else if (field.booleanValue !== undefined) {
-        return field.booleanValue;
-    }
-    else if (field.doubleValue !== undefined) {
-        return field.doubleValue;
-    }
-    else if (field.isNull !== undefined) {
-        return null;
-    }
-    else if (field.longValue !== undefined) {
-        return field.longValue;
-    }
-    else if (field.blobValue !== undefined) {
-        return field.blobValue;
-        // eslint-disable-next-line unicorn/no-negated-condition
-    }
-    else if (field.arrayValue !== undefined) {
-        if (field.arrayValue.stringValues !== undefined) {
-            return field.arrayValue.stringValues;
-        }
-        throw new Error('Unknown array type');
-    }
-    else {
-        throw new Error('Unknown type');
-    }
+  if (field.stringValue !== undefined) {
+    return field.stringValue;
+  } else if (field.booleanValue !== undefined) {
+    return field.booleanValue;
+  } else if (field.doubleValue !== undefined) {
+    return field.doubleValue;
+  } else if (field.isNull !== undefined) {
+    return null;
+  } else if (field.longValue !== undefined) {
+    return field.longValue;
+  } else if (field.blobValue !== undefined) {
+    return field.blobValue;
+    // eslint-disable-next-line unicorn/no-negated-condition
+  } else if (field.arrayValue !== undefined) {
+    if (field.arrayValue.stringValues !== undefined) {
+      return field.arrayValue.stringValues;
+    }
+    throw new Error("Unknown array type");
+  } else {
+    throw new Error("Unknown type");
+  }
 }
 function typingsToAwsTypeHint(typings) {
-    if (typings === 'date') {
-        return clientRdsData.TypeHint.DATE;
-    }
-    else if (typings === 'decimal') {
-        return clientRdsData.TypeHint.DECIMAL;
-    }
-    else if (typings === 'json') {
-        return clientRdsData.TypeHint.JSON;
-    }
-    else if (typings === 'time') {
-        return clientRdsData.TypeHint.TIME;
-    }
-    else if (typings === 'timestamp') {
-        return clientRdsData.TypeHint.TIMESTAMP;
-    }
-    else if (typings === 'uuid') {
-        return clientRdsData.TypeHint.UUID;
-    }
-    else {
-        return undefined;
-    }
+  if (typings === "date") {
+    return clientRdsData.TypeHint.DATE;
+  } else if (typings === "decimal") {
+    return clientRdsData.TypeHint.DECIMAL;
+  } else if (typings === "json") {
+    return clientRdsData.TypeHint.JSON;
+  } else if (typings === "time") {
+    return clientRdsData.TypeHint.TIME;
+  } else if (typings === "timestamp") {
+    return clientRdsData.TypeHint.TIMESTAMP;
+  } else if (typings === "uuid") {
+    return clientRdsData.TypeHint.UUID;
+  } else {
+    return undefined;
+  }
 }
 function toValueParam(value, typings) {
-    const response = {
-        value: {},
-        typeHint: typingsToAwsTypeHint(typings),
+  const response = {
+    value: {},
+    typeHint: typingsToAwsTypeHint(typings),
+  };
+  if (value === null) {
+    response.value = { isNull: true };
+  } else if (typeof value === "string") {
+    switch (true) {
+      case response.typeHint === TypeHint.DATE: {
+        response.value = { stringValue: value.split("T")[0] };
+        break;
+      }
+      case response.typeHint === TypeHint.TIMESTAMP: {
+        response.value = {
+          stringValue: new Date(value)
+            .toISOString()
+            .replace("T", " ")
+            .replace("Z", ""),
+        };
+        break;
+      }
+      default: {
+        response.value = { stringValue: value };
+      }
+    }
+  } else if (typeof value === "number" && Number.isInteger(value)) {
+    response.value = { longValue: value };
+  } else if (typeof value === "number" && !Number.isInteger(value)) {
+    response.value = { doubleValue: value };
+  } else if (typeof value === "boolean") {
+    response.value = { booleanValue: value };
+  } else if (value instanceof Date) {
+    // eslint-disable-line no-instanceof/no-instanceof
+    response.value = {
+      stringValue: value.toISOString().replace("T", " ").replace("Z", ""),
     };
-    if (value === null) {
-        response.value = { isNull: true };
-    }
-    else if (typeof value === 'string') {
-        response.value = response.typeHint === 'DATE'
-            ? { stringValue: value.split('T')[0] }
-            : { stringValue: value };
-    }
-    else if (typeof value === 'number' && Number.isInteger(value)) {
-        response.value = { longValue: value };
-    }
-    else if (typeof value === 'number' && !Number.isInteger(value)) {
-        response.value = { doubleValue: value };
-    }
-    else if (typeof value === 'boolean') {
-        response.value = { booleanValue: value };
-    }
-    else if (value instanceof Date) { // eslint-disable-line no-instanceof/no-instanceof
-        response.value = { stringValue: value.toISOString().replace('T', ' ').replace('Z', '') };
-    }
-    else {
-        throw new Error(`Unknown type for ${value}`);
-    }
-    return response;
+  } else {
+    throw new Error(`Unknown type for ${value}`);
+  }
+  return response;
 }
 
 var _a$1, _b, _c;
 class AwsDataApiPreparedQuery extends index.PreparedQuery {
-    constructor(client, queryString, params, typings, options, fields, 
+  constructor(
+    client,
+    queryString,
+    params,
+    typings,
+    options,
+    fields,
     /** @internal */
-    transactionId, customResultMapper) {
-        super();
-        this.client = client;
-        this.params = params;
-        this.typings = typings;
-        this.options = options;
-        this.fields = fields;
-        this.transactionId = transactionId;
-        this.customResultMapper = customResultMapper;
-        this.rawQuery = new clientRdsData.ExecuteStatementCommand({
-            sql: queryString,
-            parameters: [],
-            secretArn: options.secretArn,
-            resourceArn: options.resourceArn,
-            database: options.database,
-            transactionId,
-            includeResultMetadata: !fields && !customResultMapper,
-        });
-    }
-    async execute(placeholderValues = {}) {
-        const { fields, joinsNotNullableMap, customResultMapper } = this;
-        const rows = await this.values(placeholderValues);
-        if (!fields && !customResultMapper) {
-            return rows;
-        }
-        return customResultMapper
-            ? customResultMapper(rows)
-            : rows.map((row) => index.mapResultRow(fields, row, joinsNotNullableMap));
-    }
-    all(placeholderValues) {
-        return this.execute(placeholderValues);
-    }
-    async values(placeholderValues = {}) {
-        const params = index.fillPlaceholders(this.params, placeholderValues ?? {});
-        this.rawQuery.input.parameters = params.map((param, index) => ({
-            name: `${index + 1}`,
-            ...toValueParam(param, this.typings[index]),
-        }));
-        this.options.logger?.logQuery(this.rawQuery.input.sql, this.rawQuery.input.parameters);
-        const { fields, rawQuery, client, customResultMapper } = this;
-        if (!fields && !customResultMapper) {
-            const result = await client.send(rawQuery);
-            if (result.columnMetadata && result.columnMetadata.length > 0) {
-                return this.mapResultRows(result.records ?? [], result.columnMetadata);
-            }
-            return result.records ?? [];
-        }
-        const result = await client.send(rawQuery);
-        return result.records?.map((row) => {
-            return row.map((field) => getValueFromDataApi(field));
-        });
-    }
-    /** @internal */
-    mapResultRows(records, columnMetadata) {
-        return records.map((record) => {
-            const row = {};
-            for (const [index, field] of record.entries()) {
-                const { name } = columnMetadata[index];
-                row[name ?? index] = getValueFromDataApi(field); // not what to default if name is undefined
-            }
-            return row;
-        });
-    }
+    transactionId,
+    customResultMapper
+  ) {
+    super();
+    this.client = client;
+    this.params = params;
+    this.typings = typings;
+    this.options = options;
+    this.fields = fields;
+    this.transactionId = transactionId;
+    this.customResultMapper = customResultMapper;
+    this.rawQuery = new clientRdsData.ExecuteStatementCommand({
+      sql: queryString,
+      parameters: [],
+      secretArn: options.secretArn,
+      resourceArn: options.resourceArn,
+      database: options.database,
+      transactionId,
+      includeResultMetadata: !fields && !customResultMapper,
+    });
+  }
+  async execute(placeholderValues = {}) {
+    const { fields, joinsNotNullableMap, customResultMapper } = this;
+    const rows = await this.values(placeholderValues);
+    if (!fields && !customResultMapper) {
+      return rows;
+    }
+    return customResultMapper
+      ? customResultMapper(rows)
+      : rows.map((row) => index.mapResultRow(fields, row, joinsNotNullableMap));
+  }
+  all(placeholderValues) {
+    return this.execute(placeholderValues);
+  }
+  async values(placeholderValues = {}) {
+    const params = index.fillPlaceholders(this.params, placeholderValues ?? {});
+    this.rawQuery.input.parameters = params.map((param, index) => ({
+      name: `${index + 1}`,
+      ...toValueParam(param, this.typings[index]),
+    }));
+    this.options.logger?.logQuery(
+      this.rawQuery.input.sql,
+      this.rawQuery.input.parameters
+    );
+    const { fields, rawQuery, client, customResultMapper } = this;
+    if (!fields && !customResultMapper) {
+      const result = await client.send(rawQuery);
+      if (result.columnMetadata && result.columnMetadata.length > 0) {
+        return this.mapResultRows(result.records ?? [], result.columnMetadata);
+      }
+      return result.records ?? [];
+    }
+    const result = await client.send(rawQuery);
+    return result.records?.map((row) => {
+      return row.map((field) => getValueFromDataApi(field));
+    });
+  }
+  /** @internal */
+  mapResultRows(records, columnMetadata) {
+    return records.map((record) => {
+      const row = {};
+      for (const [index, field] of record.entries()) {
+        const { name } = columnMetadata[index];
+        row[name ?? index] = getValueFromDataApi(field); // not what to default if name is undefined
+      }
+      return row;
+    });
+  }
 }
 _a$1 = index.entityKind;
-AwsDataApiPreparedQuery[_a$1] = 'AwsDataApiPreparedQuery';
+AwsDataApiPreparedQuery[_a$1] = "AwsDataApiPreparedQuery";
 class AwsDataApiSession extends index.PgSession {
-    constructor(
+  constructor(
     /** @internal */
-    client, dialect, schema, options, 
+    client,
+    dialect,
+    schema,
+    options,
     /** @internal */
-    transactionId) {
-        super(dialect);
-        this.client = client;
-        this.schema = schema;
-        this.options = options;
-        this.transactionId = transactionId;
-        this.rawQuery = {
-            secretArn: options.secretArn,
-            resourceArn: options.resourceArn,
-            database: options.database,
-        };
-    }
-    prepareQuery(query, fields, transactionId, customResultMapper) {
-        return new AwsDataApiPreparedQuery(this.client, query.sql, query.params, query.typings ?? [], this.options, fields, transactionId, customResultMapper);
-    }
-    execute(query) {
-        return this.prepareQuery(this.dialect.sqlToQuery(query), undefined, this.transactionId).execute();
-    }
-    async transaction(transaction, config) {
-        const { transactionId } = await this.client.send(new clientRdsData.BeginTransactionCommand(this.rawQuery));
-        const session = new AwsDataApiSession(this.client, this.dialect, this.schema, this.options, transactionId);
-        const tx = new AwsDataApiTransaction(this.dialect, session, this.schema);
-        if (config) {
-            await tx.setTransaction(config);
-        }
-        try {
-            const result = await transaction(tx);
-            await this.client.send(new clientRdsData.CommitTransactionCommand({ ...this.rawQuery, transactionId }));
-            return result;
-        }
-        catch (e) {
-            await this.client.send(new clientRdsData.RollbackTransactionCommand({ ...this.rawQuery, transactionId }));
-            throw e;
-        }
-    }
+    transactionId
+  ) {
+    super(dialect);
+    this.client = client;
+    this.schema = schema;
+    this.options = options;
+    this.transactionId = transactionId;
+    this.rawQuery = {
+      secretArn: options.secretArn,
+      resourceArn: options.resourceArn,
+      database: options.database,
+    };
+  }
+  prepareQuery(query, fields, transactionId, customResultMapper) {
+    return new AwsDataApiPreparedQuery(
+      this.client,
+      query.sql,
+      query.params,
+      query.typings ?? [],
+      this.options,
+      fields,
+      transactionId,
+      customResultMapper
+    );
+  }
+  execute(query) {
+    return this.prepareQuery(
+      this.dialect.sqlToQuery(query),
+      undefined,
+      this.transactionId
+    ).execute();
+  }
+  async transaction(transaction, config) {
+    const { transactionId } = await this.client.send(
+      new clientRdsData.BeginTransactionCommand(this.rawQuery)
+    );
+    const session = new AwsDataApiSession(
+      this.client,
+      this.dialect,
+      this.schema,
+      this.options,
+      transactionId
+    );
+    const tx = new AwsDataApiTransaction(this.dialect, session, this.schema);
+    if (config) {
+      await tx.setTransaction(config);
+    }
+    try {
+      const result = await transaction(tx);
+      await this.client.send(
+        new clientRdsData.CommitTransactionCommand({
+          ...this.rawQuery,
+          transactionId,
+        })
+      );
+      return result;
+    } catch (e) {
+      await this.client.send(
+        new clientRdsData.RollbackTransactionCommand({
+          ...this.rawQuery,
+          transactionId,
+        })
+      );
+      throw e;
+    }
+  }
 }
 _b = index.entityKind;
-AwsDataApiSession[_b] = 'AwsDataApiSession';
+AwsDataApiSession[_b] = "AwsDataApiSession";
 class AwsDataApiTransaction extends index.PgTransaction {
-    transaction(transaction) {
-        const savepointName = `sp${this.nestedIndex + 1}`;
-        const tx = new AwsDataApiTransaction(this.dialect, this.session, this.schema, this.nestedIndex + 1);
-        this.session.execute(index.sql `savepoint ${savepointName}`);
-        try {
-            const result = transaction(tx);
-            this.session.execute(index.sql `release savepoint ${savepointName}`);
-            return result;
-        }
-        catch (e) {
-            this.session.execute(index.sql `rollback to savepoint ${savepointName}`);
-            throw e;
-        }
-    }
+  transaction(transaction) {
+    const savepointName = `sp${this.nestedIndex + 1}`;
+    const tx = new AwsDataApiTransaction(
+      this.dialect,
+      this.session,
+      this.schema,
+      this.nestedIndex + 1
+    );
+    this.session.execute(index.sql`savepoint ${savepointName}`);
+    try {
+      const result = transaction(tx);
+      this.session.execute(index.sql`release savepoint ${savepointName}`);
+      return result;
+    } catch (e) {
+      this.session.execute(index.sql`rollback to savepoint ${savepointName}`);
+      throw e;
+    }
+  }
 }
 _c = index.entityKind;
-AwsDataApiTransaction[_c] = 'AwsDataApiTransaction';
+AwsDataApiTransaction[_c] = "AwsDataApiTransaction";
 
 var _a;
 class AwsPgDialect extends index.PgDialect {
-    escapeParam(num) {
-        return `:${num + 1}`;
-    }
+  escapeParam(num) {
+    return `:${num + 1}`;
+  }
 }
 _a = index.entityKind;
-AwsPgDialect[_a] = 'AwsPgDialect';
+AwsPgDialect[_a] = "AwsPgDialect";
 function drizzle(client, config) {
-    const dialect = new AwsPgDialect();
-    let logger;
-    if (config.logger === true) {
-        logger = new index.DefaultLogger();
-    }
-    else if (config.logger !== false) {
-        logger = config.logger;
-    }
-    let schema;
-    if (config.schema) {
-        const tablesConfig = index.extractTablesRelationalConfig(config.schema, index.createTableRelationsHelpers);
-        schema = {
-            fullSchema: config.schema,
-            schema: tablesConfig.tables,
-            tableNamesMap: tablesConfig.tableNamesMap,
-        };
-    }
-    const session = new AwsDataApiSession(client, dialect, schema, { ...config, logger }, undefined);
-    return new index.PgDatabase(dialect, session, schema);
+  const dialect = new AwsPgDialect();
+  let logger;
+  if (config.logger === true) {
+    logger = new index.DefaultLogger();
+  } else if (config.logger !== false) {
+    logger = config.logger;
+  }
+  let schema;
+  if (config.schema) {
+    const tablesConfig = index.extractTablesRelationalConfig(
+      config.schema,
+      index.createTableRelationsHelpers
+    );
+    schema = {
+      fullSchema: config.schema,
+      schema: tablesConfig.tables,
+      tableNamesMap: tablesConfig.tableNamesMap,
+    };
+  }
+  const session = new AwsDataApiSession(
+    client,
+    dialect,
+    schema,
+    { ...config, logger },
+    undefined
+  );
+  return new index.PgDatabase(dialect, session, schema);
 }
 
 exports.AwsDataApiPreparedQuery = AwsDataApiPreparedQuery;
diff --git a/aws-data-api/pg/index.mjs b/aws-data-api/pg/index.mjs
index 3e21cdc8433a42cb7762084ce91df81ca92690fe..7de9be8cf80220853eb063f758b520286258db9f 100644
--- a/aws-data-api/pg/index.mjs
+++ b/aws-data-api/pg/index.mjs
@@ -1,261 +1,336 @@
-import { e as entityKind, m as mapResultRow, f as fillPlaceholders, s as sql, P as PgDialect, a as extractTablesRelationalConfig, c as createTableRelationsHelpers } from '../../alias-cf8e03cd.mjs';
-import { DefaultLogger } from '../../index.mjs';
-import { P as PreparedQuery, a as PgSession, b as PgTransaction, c as PgDatabase } from '../../session-6ea797a6.mjs';
-import { TypeHint, ExecuteStatementCommand, BeginTransactionCommand, CommitTransactionCommand, RollbackTransactionCommand } from '@aws-sdk/client-rds-data';
+import {
+  e as entityKind,
+  m as mapResultRow,
+  f as fillPlaceholders,
+  s as sql,
+  P as PgDialect,
+  a as extractTablesRelationalConfig,
+  c as createTableRelationsHelpers,
+} from "../../alias-cf8e03cd.mjs";
+import { DefaultLogger } from "../../index.mjs";
+import {
+  P as PreparedQuery,
+  a as PgSession,
+  b as PgTransaction,
+  c as PgDatabase,
+} from "../../session-6ea797a6.mjs";
+import {
+  TypeHint,
+  ExecuteStatementCommand,
+  BeginTransactionCommand,
+  CommitTransactionCommand,
+  RollbackTransactionCommand,
+} from "@aws-sdk/client-rds-data";
 
 function getValueFromDataApi(field) {
-    if (field.stringValue !== undefined) {
-        return field.stringValue;
-    }
-    else if (field.booleanValue !== undefined) {
-        return field.booleanValue;
-    }
-    else if (field.doubleValue !== undefined) {
-        return field.doubleValue;
-    }
-    else if (field.isNull !== undefined) {
-        return null;
-    }
-    else if (field.longValue !== undefined) {
-        return field.longValue;
-    }
-    else if (field.blobValue !== undefined) {
-        return field.blobValue;
-        // eslint-disable-next-line unicorn/no-negated-condition
-    }
-    else if (field.arrayValue !== undefined) {
-        if (field.arrayValue.stringValues !== undefined) {
-            return field.arrayValue.stringValues;
-        }
-        throw new Error('Unknown array type');
-    }
-    else {
-        throw new Error('Unknown type');
-    }
+  if (field.stringValue !== undefined) {
+    return field.stringValue;
+  } else if (field.booleanValue !== undefined) {
+    return field.booleanValue;
+  } else if (field.doubleValue !== undefined) {
+    return field.doubleValue;
+  } else if (field.isNull !== undefined) {
+    return null;
+  } else if (field.longValue !== undefined) {
+    return field.longValue;
+  } else if (field.blobValue !== undefined) {
+    return field.blobValue;
+    // eslint-disable-next-line unicorn/no-negated-condition
+  } else if (field.arrayValue !== undefined) {
+    if (field.arrayValue.stringValues !== undefined) {
+      return field.arrayValue.stringValues;
+    }
+    throw new Error("Unknown array type");
+  } else {
+    throw new Error("Unknown type");
+  }
 }
 function typingsToAwsTypeHint(typings) {
-    if (typings === 'date') {
-        return TypeHint.DATE;
-    }
-    else if (typings === 'decimal') {
-        return TypeHint.DECIMAL;
-    }
-    else if (typings === 'json') {
-        return TypeHint.JSON;
-    }
-    else if (typings === 'time') {
-        return TypeHint.TIME;
-    }
-    else if (typings === 'timestamp') {
-        return TypeHint.TIMESTAMP;
-    }
-    else if (typings === 'uuid') {
-        return TypeHint.UUID;
-    }
-    else {
-        return undefined;
-    }
+  if (typings === "date") {
+    return TypeHint.DATE;
+  } else if (typings === "decimal") {
+    return TypeHint.DECIMAL;
+  } else if (typings === "json") {
+    return TypeHint.JSON;
+  } else if (typings === "time") {
+    return TypeHint.TIME;
+  } else if (typings === "timestamp") {
+    return TypeHint.TIMESTAMP;
+  } else if (typings === "uuid") {
+    return TypeHint.UUID;
+  } else {
+    return undefined;
+  }
 }
 function toValueParam(value, typings) {
-    const response = {
-        value: {},
-        typeHint: typingsToAwsTypeHint(typings),
+  const response = {
+    value: {},
+    typeHint: typingsToAwsTypeHint(typings),
+  };
+  if (value === null) {
+    response.value = { isNull: true };
+  } else if (typeof value === "string") {
+    switch (true) {
+      case response.typeHint === TypeHint.DATE: {
+        response.value = { stringValue: value.split("T")[0] };
+        break;
+      }
+      case response.typeHint === TypeHint.TIMESTAMP: {
+        response.value = {
+          stringValue: new Date(value)
+            .toISOString()
+            .replace("T", " ")
+            .replace("Z", ""),
+        };
+        break;
+      }
+      default: {
+        response.value = { stringValue: value };
+      }
+    }
+  } else if (typeof value === "number" && Number.isInteger(value)) {
+    response.value = { longValue: value };
+  } else if (typeof value === "number" && !Number.isInteger(value)) {
+    response.value = { doubleValue: value };
+  } else if (typeof value === "boolean") {
+    response.value = { booleanValue: value };
+  } else if (value instanceof Date) {
+    // eslint-disable-line no-instanceof/no-instanceof
+    response.value = {
+      stringValue: value.toISOString().replace("T", " ").replace("Z", ""),
     };
-    if (value === null) {
-        response.value = { isNull: true };
-    }
-    else if (typeof value === 'string') {
-        response.value = response.typeHint === 'DATE'
-            ? { stringValue: value.split('T')[0] }
-            : { stringValue: value };
-    }
-    else if (typeof value === 'number' && Number.isInteger(value)) {
-        response.value = { longValue: value };
-    }
-    else if (typeof value === 'number' && !Number.isInteger(value)) {
-        response.value = { doubleValue: value };
-    }
-    else if (typeof value === 'boolean') {
-        response.value = { booleanValue: value };
-    }
-    else if (value instanceof Date) { // eslint-disable-line no-instanceof/no-instanceof
-        response.value = { stringValue: value.toISOString().replace('T', ' ').replace('Z', '') };
-    }
-    else {
-        throw new Error(`Unknown type for ${value}`);
-    }
-    return response;
+  } else {
+    throw new Error(`Unknown type for ${value}`);
+  }
+  return response;
 }
 
 class AwsDataApiPreparedQuery extends PreparedQuery {
-    client;
-    params;
-    typings;
-    options;
-    fields;
-    transactionId;
-    customResultMapper;
-    static [entityKind] = 'AwsDataApiPreparedQuery';
-    rawQuery;
-    constructor(client, queryString, params, typings, options, fields, 
-    /** @internal */
-    transactionId, customResultMapper) {
-        super();
-        this.client = client;
-        this.params = params;
-        this.typings = typings;
-        this.options = options;
-        this.fields = fields;
-        this.transactionId = transactionId;
-        this.customResultMapper = customResultMapper;
-        this.rawQuery = new ExecuteStatementCommand({
-            sql: queryString,
-            parameters: [],
-            secretArn: options.secretArn,
-            resourceArn: options.resourceArn,
-            database: options.database,
-            transactionId,
-            includeResultMetadata: !fields && !customResultMapper,
-        });
-    }
-    async execute(placeholderValues = {}) {
-        const { fields, joinsNotNullableMap, customResultMapper } = this;
-        const rows = await this.values(placeholderValues);
-        if (!fields && !customResultMapper) {
-            return rows;
-        }
-        return customResultMapper
-            ? customResultMapper(rows)
-            : rows.map((row) => mapResultRow(fields, row, joinsNotNullableMap));
-    }
-    all(placeholderValues) {
-        return this.execute(placeholderValues);
-    }
-    async values(placeholderValues = {}) {
-        const params = fillPlaceholders(this.params, placeholderValues ?? {});
-        this.rawQuery.input.parameters = params.map((param, index) => ({
-            name: `${index + 1}`,
-            ...toValueParam(param, this.typings[index]),
-        }));
-        this.options.logger?.logQuery(this.rawQuery.input.sql, this.rawQuery.input.parameters);
-        const { fields, rawQuery, client, customResultMapper } = this;
-        if (!fields && !customResultMapper) {
-            const result = await client.send(rawQuery);
-            if (result.columnMetadata && result.columnMetadata.length > 0) {
-                return this.mapResultRows(result.records ?? [], result.columnMetadata);
-            }
-            return result.records ?? [];
-        }
-        const result = await client.send(rawQuery);
-        return result.records?.map((row) => {
-            return row.map((field) => getValueFromDataApi(field));
-        });
-    }
+  client;
+  params;
+  typings;
+  options;
+  fields;
+  transactionId;
+  customResultMapper;
+  static [entityKind] = "AwsDataApiPreparedQuery";
+  rawQuery;
+  constructor(
+    client,
+    queryString,
+    params,
+    typings,
+    options,
+    fields,
     /** @internal */
-    mapResultRows(records, columnMetadata) {
-        return records.map((record) => {
-            const row = {};
-            for (const [index, field] of record.entries()) {
-                const { name } = columnMetadata[index];
-                row[name ?? index] = getValueFromDataApi(field); // not what to default if name is undefined
-            }
-            return row;
-        });
-    }
+    transactionId,
+    customResultMapper
+  ) {
+    super();
+    this.client = client;
+    this.params = params;
+    this.typings = typings;
+    this.options = options;
+    this.fields = fields;
+    this.transactionId = transactionId;
+    this.customResultMapper = customResultMapper;
+    this.rawQuery = new ExecuteStatementCommand({
+      sql: queryString,
+      parameters: [],
+      secretArn: options.secretArn,
+      resourceArn: options.resourceArn,
+      database: options.database,
+      transactionId,
+      includeResultMetadata: !fields && !customResultMapper,
+    });
+  }
+  async execute(placeholderValues = {}) {
+    const { fields, joinsNotNullableMap, customResultMapper } = this;
+    const rows = await this.values(placeholderValues);
+    if (!fields && !customResultMapper) {
+      return rows;
+    }
+    return customResultMapper
+      ? customResultMapper(rows)
+      : rows.map((row) => mapResultRow(fields, row, joinsNotNullableMap));
+  }
+  all(placeholderValues) {
+    return this.execute(placeholderValues);
+  }
+  async values(placeholderValues = {}) {
+    const params = fillPlaceholders(this.params, placeholderValues ?? {});
+    this.rawQuery.input.parameters = params.map((param, index) => ({
+      name: `${index + 1}`,
+      ...toValueParam(param, this.typings[index]),
+    }));
+    this.options.logger?.logQuery(
+      this.rawQuery.input.sql,
+      this.rawQuery.input.parameters
+    );
+    const { fields, rawQuery, client, customResultMapper } = this;
+    if (!fields && !customResultMapper) {
+      const result = await client.send(rawQuery);
+      if (result.columnMetadata && result.columnMetadata.length > 0) {
+        return this.mapResultRows(result.records ?? [], result.columnMetadata);
+      }
+      return result.records ?? [];
+    }
+    const result = await client.send(rawQuery);
+    return result.records?.map((row) => {
+      return row.map((field) => getValueFromDataApi(field));
+    });
+  }
+  /** @internal */
+  mapResultRows(records, columnMetadata) {
+    return records.map((record) => {
+      const row = {};
+      for (const [index, field] of record.entries()) {
+        const { name } = columnMetadata[index];
+        row[name ?? index] = getValueFromDataApi(field); // not what to default if name is undefined
+      }
+      return row;
+    });
+  }
 }
 class AwsDataApiSession extends PgSession {
-    client;
-    schema;
-    options;
-    transactionId;
-    static [entityKind] = 'AwsDataApiSession';
-    /** @internal */
-    rawQuery;
-    constructor(
+  client;
+  schema;
+  options;
+  transactionId;
+  static [entityKind] = "AwsDataApiSession";
+  /** @internal */
+  rawQuery;
+  constructor(
     /** @internal */
-    client, dialect, schema, options, 
+    client,
+    dialect,
+    schema,
+    options,
     /** @internal */
-    transactionId) {
-        super(dialect);
-        this.client = client;
-        this.schema = schema;
-        this.options = options;
-        this.transactionId = transactionId;
-        this.rawQuery = {
-            secretArn: options.secretArn,
-            resourceArn: options.resourceArn,
-            database: options.database,
-        };
-    }
-    prepareQuery(query, fields, transactionId, customResultMapper) {
-        return new AwsDataApiPreparedQuery(this.client, query.sql, query.params, query.typings ?? [], this.options, fields, transactionId, customResultMapper);
-    }
-    execute(query) {
-        return this.prepareQuery(this.dialect.sqlToQuery(query), undefined, this.transactionId).execute();
-    }
-    async transaction(transaction, config) {
-        const { transactionId } = await this.client.send(new BeginTransactionCommand(this.rawQuery));
-        const session = new AwsDataApiSession(this.client, this.dialect, this.schema, this.options, transactionId);
-        const tx = new AwsDataApiTransaction(this.dialect, session, this.schema);
-        if (config) {
-            await tx.setTransaction(config);
-        }
-        try {
-            const result = await transaction(tx);
-            await this.client.send(new CommitTransactionCommand({ ...this.rawQuery, transactionId }));
-            return result;
-        }
-        catch (e) {
-            await this.client.send(new RollbackTransactionCommand({ ...this.rawQuery, transactionId }));
-            throw e;
-        }
-    }
+    transactionId
+  ) {
+    super(dialect);
+    this.client = client;
+    this.schema = schema;
+    this.options = options;
+    this.transactionId = transactionId;
+    this.rawQuery = {
+      secretArn: options.secretArn,
+      resourceArn: options.resourceArn,
+      database: options.database,
+    };
+  }
+  prepareQuery(query, fields, transactionId, customResultMapper) {
+    return new AwsDataApiPreparedQuery(
+      this.client,
+      query.sql,
+      query.params,
+      query.typings ?? [],
+      this.options,
+      fields,
+      transactionId,
+      customResultMapper
+    );
+  }
+  execute(query) {
+    return this.prepareQuery(
+      this.dialect.sqlToQuery(query),
+      undefined,
+      this.transactionId
+    ).execute();
+  }
+  async transaction(transaction, config) {
+    const { transactionId } = await this.client.send(
+      new BeginTransactionCommand(this.rawQuery)
+    );
+    const session = new AwsDataApiSession(
+      this.client,
+      this.dialect,
+      this.schema,
+      this.options,
+      transactionId
+    );
+    const tx = new AwsDataApiTransaction(this.dialect, session, this.schema);
+    if (config) {
+      await tx.setTransaction(config);
+    }
+    try {
+      const result = await transaction(tx);
+      await this.client.send(
+        new CommitTransactionCommand({ ...this.rawQuery, transactionId })
+      );
+      return result;
+    } catch (e) {
+      await this.client.send(
+        new RollbackTransactionCommand({ ...this.rawQuery, transactionId })
+      );
+      throw e;
+    }
+  }
 }
 class AwsDataApiTransaction extends PgTransaction {
-    static [entityKind] = 'AwsDataApiTransaction';
-    transaction(transaction) {
-        const savepointName = `sp${this.nestedIndex + 1}`;
-        const tx = new AwsDataApiTransaction(this.dialect, this.session, this.schema, this.nestedIndex + 1);
-        this.session.execute(sql `savepoint ${savepointName}`);
-        try {
-            const result = transaction(tx);
-            this.session.execute(sql `release savepoint ${savepointName}`);
-            return result;
-        }
-        catch (e) {
-            this.session.execute(sql `rollback to savepoint ${savepointName}`);
-            throw e;
-        }
-    }
+  static [entityKind] = "AwsDataApiTransaction";
+  transaction(transaction) {
+    const savepointName = `sp${this.nestedIndex + 1}`;
+    const tx = new AwsDataApiTransaction(
+      this.dialect,
+      this.session,
+      this.schema,
+      this.nestedIndex + 1
+    );
+    this.session.execute(sql`savepoint ${savepointName}`);
+    try {
+      const result = transaction(tx);
+      this.session.execute(sql`release savepoint ${savepointName}`);
+      return result;
+    } catch (e) {
+      this.session.execute(sql`rollback to savepoint ${savepointName}`);
+      throw e;
+    }
+  }
 }
 
 class AwsPgDialect extends PgDialect {
-    static [entityKind] = 'AwsPgDialect';
-    escapeParam(num) {
-        return `:${num + 1}`;
-    }
+  static [entityKind] = "AwsPgDialect";
+  escapeParam(num) {
+    return `:${num + 1}`;
+  }
 }
 function drizzle(client, config) {
-    const dialect = new AwsPgDialect();
-    let logger;
-    if (config.logger === true) {
-        logger = new DefaultLogger();
-    }
-    else if (config.logger !== false) {
-        logger = config.logger;
-    }
-    let schema;
-    if (config.schema) {
-        const tablesConfig = extractTablesRelationalConfig(config.schema, createTableRelationsHelpers);
-        schema = {
-            fullSchema: config.schema,
-            schema: tablesConfig.tables,
-            tableNamesMap: tablesConfig.tableNamesMap,
-        };
-    }
-    const session = new AwsDataApiSession(client, dialect, schema, { ...config, logger }, undefined);
-    return new PgDatabase(dialect, session, schema);
+  const dialect = new AwsPgDialect();
+  let logger;
+  if (config.logger === true) {
+    logger = new DefaultLogger();
+  } else if (config.logger !== false) {
+    logger = config.logger;
+  }
+  let schema;
+  if (config.schema) {
+    const tablesConfig = extractTablesRelationalConfig(
+      config.schema,
+      createTableRelationsHelpers
+    );
+    schema = {
+      fullSchema: config.schema,
+      schema: tablesConfig.tables,
+      tableNamesMap: tablesConfig.tableNamesMap,
+    };
+  }
+  const session = new AwsDataApiSession(
+    client,
+    dialect,
+    schema,
+    { ...config, logger },
+    undefined
+  );
+  return new PgDatabase(dialect, session, schema);
 }
 
-export { AwsDataApiPreparedQuery, AwsDataApiSession, AwsDataApiTransaction, AwsPgDialect, drizzle };
+export {
+  AwsDataApiPreparedQuery,
+  AwsDataApiSession,
+  AwsDataApiTransaction,
+  AwsPgDialect,
+  drizzle,
+};
 //# sourceMappingURL=index.mjs.map
